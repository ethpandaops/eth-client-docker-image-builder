name: Manifest
description: Build and push a docker manifest to Docker Hub

inputs:
  platforms:
    #  eg [{"platform":"linux/amd64", "runner": "ARM64", "slug": "something-arm64"},{"platform":"linux/arm64", "runner": "ubuntu-latest", "slug": "something-amd64"}]
    description: JSON list of platforms to build for
    type: string
    required: true
  source_repository:
    description: The source repository to build from
    type: string
    required: true
  source_ref:
    description: The branch, tag or SHA to checkout and build from
    type: string
    required: true
  git_commit_hash:
    description: The git commit hash that was used in the deploy action
    type: string
    required: true
  target_tag:
    description: Docker hub tag to push to
    type: string
    required: true
  target_repository:
    description: Docker hub repository to push to
    type: string
    required: true
  harbor_registry:
    description: Harbor registry to push the images to
    type: string
    default: ''
  DOCKER_USERNAME:
    required: true
  DOCKER_PASSWORD:
    required: true
  HARBOR_USERNAME:
    required: true
  HARBOR_PASSWORD:
    required: true

runs:
  using: composite
  steps:
  - name: Checkout this repo
    uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
  - name: Generate images list
    id: generate_images_list
    shell: bash
    run: |
      PLATFORMS='${{ inputs.platforms }}'

      # Iterate over the platforms and build the image list
      len=$(echo $PLATFORMS | jq '. | length')
      for ((i=0; i<$len; i++)); do
          slug=$(echo $PLATFORMS | jq -r --argjson i $i '.[$i].slug')
          imagetag="${{ inputs.target_tag }}-$slug"
          image="${{ inputs.target_repository }}:$imagetag"
          url="https://hub.docker.com/v2/repositories/${{ inputs.target_repository }}/tags?page_size=25&page=1&ordering=&name=$imagetag"
          exists=$(curl -s $url | jq '.results | length > 0')
          if [ "$exists" == "true" ]; then
            IMAGES+="${{ inputs.target_repository }}:${{ inputs.target_tag }}-$slug "
            TAGS+="${{ inputs.target_repository }}:${{ inputs.target_tag }}-$slug ${{ inputs.target_repository }}:${{ inputs.target_tag }}-$slug-${{ inputs.git_commit_hash }} "
          fi
      done

      TAGS+="${{ inputs.target_repository }}:${{ inputs.target_tag }} ${{ inputs.target_repository }}:${{ inputs.target_tag }}-${{ inputs.git_commit_hash }} "

      IMAGES=${IMAGES::-1}  # Remove the trailing space
      echo "IMAGES: $IMAGES"
      echo "images=$IMAGES" >> $GITHUB_OUTPUT

      TAGS=${TAGS::-1}  # Remove the trailing space
      echo "TAGS: $TAGS"
      echo "tags=$TAGS" >> $GITHUB_OUTPUT
  - name: Check if there is atleast one image
    if: ${{ steps.generate_images_list.outputs.images == '[]' || steps.generate_images_list.outputs.images == '' }}
    shell: bash
    run: exit 1
  - name: Set up Docker Context for Buildx
    shell: bash
    id: buildx-context
    run: |
      docker context create builders
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
    with:
      endpoint: builders
  - name: Login to Docker Hub
    uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
    with:
      username: ${{ inputs.DOCKER_USERNAME }}
      password: ${{ inputs.DOCKER_PASSWORD }}

  - name: Create and push manifest images to dockerhub
    shell: bash
    run: |
      docker buildx imagetools create --dry-run -t ${{ inputs.target_repository }}:${{ inputs.target_tag }} -t ${{ inputs.target_repository }}:${{ inputs.target_tag }}-${{ inputs.git_commit_hash }} ${{ steps.generate_images_list.outputs.images }}
      docker buildx imagetools create -t ${{ inputs.target_repository }}:${{ inputs.target_tag }} -t ${{ inputs.target_repository }}:${{ inputs.target_tag }}-${{ inputs.git_commit_hash }} ${{ steps.generate_images_list.outputs.images }}

  - name: Login to harbor registry
    if: ${{ inputs.harbor_registry != '' }}
    uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
    with:
      registry: ${{ inputs.harbor_registry }}
      username: ${{ inputs.HARBOR_USERNAME }}
      password: ${{ inputs.HARBOR_PASSWORD }}

  - name: Prefix Images with Harbor registry
    if: ${{ inputs.harbor_registry != '' }}
    shell: bash
    id: harbor_prefix
    run: |
      #!/bin/bash

      # Get the original images list (assuming it's passed as an argument or environment variable)
      ORIGINAL_IMAGES="${{ steps.generate_images_list.outputs.images }}"
      SECOND_REGISTRY="${{ inputs.harbor_registry }}"

      # Initialize the new images list
      NEW_IMAGES=""

      # Split the original images by space and add the second registry prefix
      for image in $ORIGINAL_IMAGES; do
          # Extract the repository and tag parts
          
          # Add to the new images list with the second registry prefix
          NEW_IMAGES+="$SECOND_REGISTRY/$image "
      done

      # Remove the trailing space
      NEW_IMAGES=${NEW_IMAGES::-1}

      echo "ORIGINAL_IMAGES: $ORIGINAL_IMAGES"
      echo "PREFIXED_IMAGES: $NEW_IMAGES"
      echo "prefixed_images=$NEW_IMAGES" >> $GITHUB_OUTPUT


  - name: Create and push manifest images to Harbor
    if: ${{ inputs.harbor_registry != '' }}
    shell: bash
    run: |
      # Dry run first
      docker buildx imagetools create --dry-run \
        ${{ format('-t {0}/{1}:{2}', inputs.harbor_registry, inputs.target_repository, inputs.target_tag) || '' }} \
        ${{ format('-t {0}/{1}:{2}-{3}', inputs.harbor_registry, inputs.target_repository, inputs.target_tag, inputs.git_commit_hash) || '' }} \
        ${{ steps.harbor_prefix.outputs.prefixed_images }}
      
      # Actual creation
      docker buildx imagetools create \
        ${{ format('-t {0}/{1}:{2}', inputs.harbor_registry, inputs.target_repository, inputs.target_tag) || '' }} \
        ${{ format('-t {0}/{1}:{2}-{3}', inputs.harbor_registry, inputs.target_repository, inputs.target_tag, inputs.git_commit_hash) || '' }} \
        ${{ steps.harbor_prefix.outputs.prefixed_images }}

